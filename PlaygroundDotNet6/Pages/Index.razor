@page "/"
<PageTitle>TODO Index</PageTitle>
<div>


	<div class=" alert alert-primary text-center" role="alert">
		<h2>My TODO List: </h2>
	</div>
	<div style="border: 1px dashed dodgerblue; border-radius: 8px" class="p-3">
		<h2 class="text-center">Add New Todo</h2>

		<EditForm Model="@_willAddTodo">

			<div class="m-3">
				<label for="todoName" class="form-label">Todo</label>
				<InputText type="text" class="form-control" id="todoName" @bind-Value="@_willAddTodo.Name" />
			</div>


			<button type="submit" class="btn btn-primary m-3" @onclick="AddNewTodo">Add New Todo</button>
		</EditForm>
	</div>
	<table class="table">
		<thead class="table-dark">
			<tr class="table-light">
				<th scope="col">ToDo Name</th>
				<th scope="col">Status</th>
				<th scope="col">Delete</th>
			</tr>
		</thead>
		<tbody>
			@{
				foreach (var item in _todos.OrderByDescending(t => t.IsDone))
				{
					@if (item.IsDone)
					{
						<tr class="table-success">

							<td>@item.Name</td>
							<td>
								<button class="btn btn-success" @onclick="@(() => onUndoButtonClicked(item))" type="button">Done</button>
							</td>
							<td>
								<button class="btn btn-dark" @onclick="@(() => DeleteTodo(item))" type="button">Delete</button>
							</td>
						</tr>
					}
					else
					{
						<tr class="table-danger">

							<td>@item.Name</td>

							<td>
								<button class="btn btn-danger" @onclick="@(() => onDoneButtonClicked(item))" type="button">Undo</button>
							</td>
							<td>
								<button class="btn btn-dark" @onclick="@(() => DeleteTodo(item))" type="button">Delete</button>
							</td>
						</tr>
					}
				}
			}


		</tbody>
	</table>
</div>

@code {
	List<Todo> _todos = new();
	TodoContext _db = new();
	Todo _willAddTodo = new();


	protected override Task OnInitializedAsync()
	{
		_todos = _db.Todos.ToList();
		return base.OnInitializedAsync();
	}

	Todo onDoneButtonClicked(Todo todo)
	{
		todo.IsDone = true;
		UpdateTodo(todo);
		return todo;
	}

	Todo onUndoButtonClicked(Todo todo)
	{
		todo.IsDone = false;
		UpdateTodo(todo);
		return todo;
	}


	void AddNewTodo()
	{
		if (_willAddTodo.Name == "") return;
		_db.Todos.Add(_willAddTodo);
		_db.SaveChanges();
		if (_willAddTodo.Id == 0) return;
		_todos.Add(_willAddTodo);
		_willAddTodo = new Todo();
	}

	private void UpdateTodo(Todo todo)
	{
		_db.Todos.Update(todo);
		_db.SaveChanges();
	}

	private void DeleteTodo(Todo todo)
	{
		_db.Todos.Remove(todo);
		_db.SaveChanges();
		_todos.Remove(todo);
	}

}